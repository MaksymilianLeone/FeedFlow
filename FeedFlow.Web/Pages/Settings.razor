@page "/settings"
@attribute [Authorize]

@using FeedFlow.Web.Data
@using FeedFlow.Domain
@using FeedFlow.Domain.Entities     
@using Microsoft.EntityFrameworkCore 
@using Microsoft.AspNetCore.Components.Forms
@using Hangfire
@using FeedFlow.Web.Jobs

@inject AppDbContext Db
@inject IBackgroundJobClient Jobs

<h3>Store Settings</h3>

@if (_error is not null)
{
    <div class="alert alert-danger">@_error</div>
}
@if (_info is not null)
{
    <div class="alert alert-success">@_info</div>
}

@if (_settings is null)
{
    <p class="text-muted">Loading…</p>
}
else
{
    <EditForm Model="@_settings" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Store name</label>
                <InputText class="form-control" @bind-Value="_settings.StoreName" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Default currency (ISO 4217)</label>
                <InputText class="form-control" @bind-Value="_settings.DefaultCurrency" />
            </div>
            <div class="col-md-12">
                <label class="form-label">Base URL (optional, e.g. https://example.com)</label>
                <InputText class="form-control" @bind-Value="_settings.BaseUrl" />
            </div>
            <div class="col-md-4">
                <label class="form-label">UTM Source</label>
                <InputText class="form-control" @bind-Value="_settings.UtmSource" />
            </div>
            <div class="col-md-4">
                <label class="form-label">UTM Medium</label>
                <InputText class="form-control" @bind-Value="_settings.UtmMedium" />
            </div>
            <div class="col-md-4">
                <label class="form-label">UTM Campaign</label>
                <InputText class="form-control" @bind-Value="_settings.UtmCampaign" />
            </div>
        </div>

        <div class="mt-3 d-flex gap-2">
            <button class="btn btn-primary" type="submit">Save</button>
            <button class="btn btn-outline-secondary" type="button" @onclick="ReloadAsync">Reset</button>
        </div>
    </EditForm>
}

@code {
    private StoreSettings? _settings;  
    private Guid _orgId;
    private string? _info, _error;

    protected override async Task OnInitializedAsync() => await ReloadAsync();

    private async Task ReloadAsync()
    {
        _info = _error = null;

        var org = await Db.Orgs.FirstOrDefaultAsync();
        if (org is null)
        {
            org = new Org { Name = "Demo Store" };
            Db.Orgs.Add(org);
            await Db.SaveChangesAsync();
        }
        _orgId = org.Id;

        _settings = await Db.StoreSettings.SingleOrDefaultAsync(s => s.OrgId == _orgId)
                 ?? new StoreSettings { OrgId = _orgId, StoreName = org.Name, DefaultCurrency = "USD" };

        StateHasChanged();
    }

    private async Task HandleValidSubmit(EditContext _)
    {
        await SaveAsync();
    }

    private async Task SaveAsync()
    {
        try
        {
            var existing = await Db.StoreSettings.AsTracking().SingleOrDefaultAsync(s => s.OrgId == _orgId);
            if (existing is null)
            {
                Db.StoreSettings.Add(_settings!);
            }
            else
            {
                Db.Entry(existing).CurrentValues.SetValues(_settings!);
            }

            await Db.SaveChangesAsync();

            _info = "Settings saved.";
            Jobs.Enqueue<FeedJob>(j => j.BuildGoogleFeed(_orgId)); 
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }
}
