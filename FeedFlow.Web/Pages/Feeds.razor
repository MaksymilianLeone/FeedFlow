@using FeedFlow.Domain
@using FeedFlow.Web.Data
@using FeedFlow.Infrastructure.Import
@using FeedFlow.Infrastructure.Feeds
@using FeedFlow.Web.Jobs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Hangfire
@inject IBackgroundJobClient Jobs

@attribute [Authorize]
@page "/feeds"
@inject AppDbContext Db
@inject GoogleMerchantFeedBuilder FeedBuilder

<h3>FeedFlow — Google Merchant (MVP)</h3>


<AuthorizeView>
    <Authorized>
        <p>You are logged in as: @context.User.Identity.Name</p>
        <form method="post" action="/Identity/Account/Logout" class="d-inline">
            <input name="ReturnUrl" type="hidden" value="/" />
            <button type="submit" class="btn btn-outline-secondary btn-sm">Logout</button>
        </form>
    </Authorized>
    <NotAuthorized>
        <p>You are NOT logged in!</p>
    </NotAuthorized>
</AuthorizeView>

@if (!string.IsNullOrEmpty(Info))
{
    <div class="alert alert-success">@Info</div>
}
@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger">@Error</div>
}

<div class="card p-3 mb-3">
    <h5>1) Upload Products CSV</h5>
    <InputFile OnChange="OnFileChange" />
    <small class="text-muted">
        Headers: sku,title,description,price,saleprice,currency,stock,url,imageurl,brand,gtin,mpn
    </small>
</div>

<div class="card p-3 mb-3">
    <h5>2) Build Google Merchant Feed</h5>
    <button class="btn btn-primary" @onclick="BuildNow">Build Now</button>
    @if (!string.IsNullOrEmpty(FeedUrl))
    {
        <div class="mt-2"><b>Feed URL:</b> <a href="@FeedUrl" target="_blank">@FeedUrl</a></div>
    }
</div>
<div class="card p-3 mb-3">
    <h5>3) Status</h5>
    @if (GoogleFeed is null)
    {
        <p class="text-muted">No feed created yet.</p>
    }
    else
    {
        <div><b>Last build:</b> @(GoogleFeed.LastBuiltAt?.LocalDateTime.ToString("g") ?? "—")</div>
        @if (!string.IsNullOrWhiteSpace(GoogleFeed.PublicUrl))
        {
            <div><b>Public URL:</b> <a href="@GoogleFeed.PublicUrl" target="_blank">@GoogleFeed.PublicUrl</a></div>
        }
    }
    <button class="btn btn-sm btn-outline-secondary mt-2" @onclick="LoadStatus">Refresh</button>

    <hr />
    <h6>Recent runs</h6>
    @if (RecentRuns.Count == 0)
    {
        <p class="text-muted">No runs yet.</p>
    }
    else
    {
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Started</th>
                    <th>Ended</th>
                    <th>Status</th>
                    <th>Errors</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var r in RecentRuns)
                {
                    <tr>
                        <td>@r.StartedAt.LocalDateTime.ToString("g")</td>
                        <td>@(r.EndedAt?.LocalDateTime.ToString("g") ?? "—")</td>
                        <td>@r.Status</td>
                        <td>@(string.IsNullOrWhiteSpace(r.ErrorsJson) ? "—" : r.ErrorsJson)</td>
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-outline-secondary btn-sm ms-2" @onclick="TriggerScheduled">Trigger scheduled</button>
    }

</div>
@code {
    private string? Info;
    private string? Error;
    private string? FeedUrl;
    private Feed? GoogleFeed;
    private List<BuildRun> RecentRuns = new();


    protected override void OnInitialized()
    {
        LoadStatus();
    }

    private void LoadStatus()
    {
        var org = Db.Orgs.FirstOrDefault();
        if (org is null) return;

        GoogleFeed = Db.Feeds.FirstOrDefault(f => f.OrgId == org.Id && f.Channel == "google-merchant");

        RecentRuns = Db.BuildRuns
            .Where(r => r.Feed.OrgId == org.Id && r.Feed.Channel == "google-merchant")
            .OrderByDescending(r => r.StartedAt)
            .Take(10)
            .ToList();
    }

    private async Task<Guid> EnsureOrgAsync()
    {
        var org = Db.Orgs.FirstOrDefault();
        if (org is null)
        {
            org = new Org { Name = "Demo Store" };
            Db.Orgs.Add(org);
            await Db.SaveChangesAsync();
        }
        return org.Id;
    }
    private void TriggerScheduled()
    {
        var orgId = Db.Orgs.Select(o => o.Id).First();
        RecurringJob.Trigger($"org-{orgId}-google");
        Info = "Triggered the scheduled job.";
    }

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            await using var stream = file.OpenReadStream(20 * 1024 * 1024);
            var rows = await CsvProductImporter.ParseAsync(stream);
            var orgId = await EnsureOrgAsync();

            var errors = new List<string>();
            foreach (var r in rows)
            {
                var errs = CsvProductImporter.Validate(r).ToList();
                if (errs.Any()) { errors.Add($"{r.Sku ?? "(no sku)"}: {string.Join("; ", errs)}"); continue; }

                var entity = CsvProductImporter.MapToEntity(orgId, r);
                var existing = Db.Products.FirstOrDefault(p => p.OrgId == orgId && p.Sku == entity.Sku);
                if (existing is null) Db.Products.Add(entity);
                else
                {
                    existing.Title = entity.Title;
                    existing.Description = entity.Description;
                    existing.Price = entity.Price;
                    existing.SalePrice = entity.SalePrice;
                    existing.Currency = entity.Currency;
                    existing.Stock = entity.Stock;
                    existing.Url = entity.Url;
                    existing.ImageUrl = entity.ImageUrl;
                    existing.Brand = entity.Brand;
                    existing.Gtin = entity.Gtin;
                    existing.IsActive = true;
                }
            }
            await Db.SaveChangesAsync();

            Info = $"Imported {rows.Count - errors.Count} products." + (errors.Any() ? $" {errors.Count} with issues." : "");
            Error = errors.Any() ? string.Join("\n", errors.Take(5)) + (errors.Count > 5 ? " ..." : "") : null;
        }
        catch (Exception ex) { Error = ex.Message; }
    }

    private Task BuildNow()
    {
        try
        {
            var orgId = Db.Orgs.Select(o => o.Id).First();
            Jobs.Enqueue<FeedJob>(j => j.BuildGoogleFeed(orgId));  
            Info = "Build queued. Check status below or in /hangfire.";
            Error = null;
            LoadStatus();
        }
        catch (Exception ex) { Error = ex.Message; }
        return Task.CompletedTask;
    }
}
